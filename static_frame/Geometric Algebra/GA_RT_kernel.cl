///////////////////////////////////////////////////////////
// Author: Harry Snell - 140342321
// Date: 30/04/17
// Desciption: OpenCL Linear Algebra static frame ray tracer - OpenCL kernel  
// File 2 of 2 
///////////////////////////////////////////////////////////

__kernel void testKernel(
	__global float3* outputData,
	__global float* cameraOrigin,
	float3 v, 
	float3 w, 
	float3 imagePlaneOrigin, 
	__global float8* spheres,
	float3 backgroundColour,  
	__global float* lightPosition,
	float3 lightColour, 
	float3 planeColour, 
	__global float* plane, 
	int numberOfSpheres 
){
	float ambient = 0;
	
	// Converts the current image plane x and y coordinates into a 1 dimensional array identifier 
	size_t id =(get_global_id(1) * get_global_size(0)) + get_global_id(0);

	// Creates the current pixel as a conformal point 
	// Corresponding blade listed at the end of each line 
	float currentPixel[6];
	currentPixel[1] = imagePlaneOrigin.x + (v.x * get_global_id(0)) + (w.x * get_global_id(1)); // e1
	currentPixel[2] = imagePlaneOrigin.y + (v.y * get_global_id(0)) + (w.y * get_global_id(1)); // e2
	currentPixel[3] = imagePlaneOrigin.z + (v.z * get_global_id(0)) + (w.z * get_global_id(1)); // e3
	currentPixel[4] = (((currentPixel[1] * currentPixel[1]) + (currentPixel[2] * currentPixel[2]) + (currentPixel[3] * currentPixel[3]))) / 2.0; // einf 
	currentPixel[5] = 1.0; // e0 
	
	// Crerates the primary ray from the camera origin through the current pixel,
	// in the form *(cameraOrigin ^ currentPixel ^ einf) where '*' is the dual operator and '^' is the outer product  
	// Corresponding blade listed at the end of each line 
	float primaryRay[14];
	primaryRay[6] = cameraOrigin[3] + (-currentPixel[3]); // e1 ^ e2
	primaryRay[7] = (-(cameraOrigin[2] + (-currentPixel[2]))); // e1 ^ e3
	primaryRay[8] = (-(cameraOrigin[2] * currentPixel[3] + (-(cameraOrigin[3] * currentPixel[2])))); // e1 ^ einf
	primaryRay[10] = cameraOrigin[1] + (-currentPixel[1]); // e2 ^ e3
	primaryRay[11] = cameraOrigin[1] * currentPixel[3] + (-(cameraOrigin[3] * currentPixel[1])); // e2 ^ einf
	primaryRay[13] = (-(cameraOrigin[1] * currentPixel[2] + (-(cameraOrigin[2] * currentPixel[1])))); // e3 ^ einf

	
	float prsip_distanceToCamera = INFINITY;
	float prpip_distanceToCamera = INFINITY;
	float primaryRaySphereIntersectionPoint[6];
	float3 sphereTempColour; 
	int closestSphereIndex;
	// Tests the primary ray for intersection with each of the scene spheres 
	for(int n = 0; n < numberOfSpheres; n++){
		// Creates a point pair by calculating the outer product of the primary ray and the current sphere 
		// The point pair encodes the intersection point/points if it/they exist
		// I.E. *(primaryRay ^ currentSphere) 
		float primaryRaySpherePointPair[26];
		primaryRaySpherePointPair[16] = primaryRay[6] * spheres[n].s2 + (-(primaryRay[7] * spheres[n].s1)) + primaryRay[10] * spheres[n].s0; // e1 ^ (e2 ^ e3)
		primaryRaySpherePointPair[17] = primaryRay[6] * spheres[n].s3 + (-(primaryRay[8] * spheres[n].s1)) + primaryRay[11] * spheres[n].s0; // e1 ^ (e2 ^ einf)
		primaryRaySpherePointPair[18] = primaryRay[6]; // e1 ^ (e2 ^ e0)
		primaryRaySpherePointPair[19] = primaryRay[7] * spheres[n].s3 + (-(primaryRay[8] * spheres[n].s2)) + primaryRay[13] * spheres[n].s0; // e1 ^ (e3 ^ einf)
		primaryRaySpherePointPair[20] = primaryRay[7]; // e1 ^ (e3 ^ e0)
		primaryRaySpherePointPair[21] = primaryRay[8]; // e1 ^ (einf ^ e0)
		primaryRaySpherePointPair[22] = primaryRay[10] * spheres[n].s3 + (-(primaryRay[11] * spheres[n].s2)) + primaryRay[13] * spheres[n].s1; // e2 ^ (e3 ^ einf)
		primaryRaySpherePointPair[23] = primaryRay[10]; // e2 ^ (e3 ^ e0)
		primaryRaySpherePointPair[24] = primaryRay[11]; // e2 ^ (einf ^ e0)
		primaryRaySpherePointPair[25] = primaryRay[13]; // e3 ^ (einf ^ e0)
		
		// Calculates the dot product of the point pair with itself.  
		float primaryRaySpherePointPairSqurared = (-((-(primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16])) + primaryRaySpherePointPair[17] * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * primaryRaySpherePointPair[17] + primaryRaySpherePointPair[19] * primaryRaySpherePointPair[20] + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[19] + primaryRaySpherePointPair[21] * primaryRaySpherePointPair[21] + primaryRaySpherePointPair[22] * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * primaryRaySpherePointPair[22] + primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24] + primaryRaySpherePointPair[25] * primaryRaySpherePointPair[25])); // 1.0
		
		
		// Dot product == 0 => 1 intersection point 
		// Dot product > 0 => 2 intersection points
		float primaryRaySphereIntersectionPoint_current[6];
		if(primaryRaySpherePointPairSqurared >= 0){
			if(primaryRaySpherePointPairSqurared == 0){
				// Decomposes the point pair into its component point 
				// See section 3.2.1.2 of the dissertation for the formula used 
				primaryRaySphereIntersectionPoint_current[1] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-primaryRaySpherePointPair[25]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + primaryRaySpherePointPair[24] * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-(primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e1
				primaryRaySphereIntersectionPoint_current[2] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[20]) * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e2
				primaryRaySphereIntersectionPoint_current[3] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-(primaryRaySpherePointPair[24] * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[21]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e3
				primaryRaySphereIntersectionPoint_current[4] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[22]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[19] * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[17]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[16] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // einf
				primaryRaySphereIntersectionPoint_current[5] = 1.0;// (-(primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e0
			}
			else{
				// Decomposes the point pair into its component points 
				// and calculates the distance of each intersection point to the camera 
				// See section 3.2.1.2 of the dissertation for the formula used 
				float primaryRaySphereFirstIntersectionPoint[6];
				primaryRaySphereFirstIntersectionPoint[1] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-primaryRaySpherePointPair[25]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + primaryRaySpherePointPair[24] * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-(primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e1
				primaryRaySphereFirstIntersectionPoint[2] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[20]) * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e2
				primaryRaySphereFirstIntersectionPoint[3] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-(primaryRaySpherePointPair[24] * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[21]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e3
				primaryRaySphereFirstIntersectionPoint[4] = sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16]) * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[22]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[19] * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[17]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[16] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // einf
				primaryRaySphereFirstIntersectionPoint[5] = 1.0;// (-(primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e0
				float primaryRaySphereFirstIntersectionPointDistance = sqrt(((primaryRaySphereFirstIntersectionPoint[1] - cameraOrigin[1])*(primaryRaySphereFirstIntersectionPoint[1] - cameraOrigin[1])) + ((primaryRaySphereFirstIntersectionPoint[2] - cameraOrigin[2])*(primaryRaySphereFirstIntersectionPoint[2] - cameraOrigin[2])) + ((primaryRaySphereFirstIntersectionPoint[3] - cameraOrigin[3])*(primaryRaySphereFirstIntersectionPoint[3] - cameraOrigin[3])));
				float primaryRaySphereSecondIntersectionPoint[6];
				primaryRaySphereSecondIntersectionPoint[1] = (-sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16])) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-primaryRaySpherePointPair[25]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + primaryRaySpherePointPair[24] * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-(primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e1
				primaryRaySphereSecondIntersectionPoint[2] = (-sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16])) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[20]) * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e2
				primaryRaySphereSecondIntersectionPoint[3] = (-sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16])) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-(primaryRaySpherePointPair[24] * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[21]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e3
				primaryRaySphereSecondIntersectionPoint[4] = (-sqrt((-((-primaryRaySpherePointPair[25]) * (-primaryRaySpherePointPair[25]))) + (-(primaryRaySpherePointPair[24] * primaryRaySpherePointPair[24])) + (-primaryRaySpherePointPair[22]) * primaryRaySpherePointPair[23] + primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[22]) + (-((-primaryRaySpherePointPair[21]) * (-primaryRaySpherePointPair[21]))) + primaryRaySpherePointPair[19] * (-primaryRaySpherePointPair[20]) + (-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[19] + (-primaryRaySpherePointPair[17]) * primaryRaySpherePointPair[18] + primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[17]) + primaryRaySpherePointPair[16] * primaryRaySpherePointPair[16])) * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])) + (-((-primaryRaySpherePointPair[22]) * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[19] * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[17]) * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[16] * (-primaryRaySpherePointPair[16]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // einf
				primaryRaySphereSecondIntersectionPoint[5] = 1.0;// (-(primaryRaySpherePointPair[23] * (-primaryRaySpherePointPair[23]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-((-primaryRaySpherePointPair[20]) * primaryRaySpherePointPair[20] / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))) + (-(primaryRaySpherePointPair[18] * (-primaryRaySpherePointPair[18]) / ((-primaryRaySpherePointPair[23]) * (-primaryRaySpherePointPair[23]) + primaryRaySpherePointPair[20] * primaryRaySpherePointPair[20] + (-primaryRaySpherePointPair[18]) * (-primaryRaySpherePointPair[18])))); // e0
				float primaryRaySphereSecondIntersectionPointDistance = sqrt(((primaryRaySphereSecondIntersectionPoint[1] - cameraOrigin[1])*(primaryRaySphereSecondIntersectionPoint[1] - cameraOrigin[1])) + ((primaryRaySphereSecondIntersectionPoint[2] - cameraOrigin[2])*(primaryRaySphereSecondIntersectionPoint[2] - cameraOrigin[2])) + ((primaryRaySphereSecondIntersectionPoint[3] - cameraOrigin[3])*(primaryRaySphereSecondIntersectionPoint[3] - cameraOrigin[3])));
				
				// Selects the closest intersection point to the camera 
				if (primaryRaySphereFirstIntersectionPointDistance < primaryRaySphereSecondIntersectionPointDistance) {
					primaryRaySphereIntersectionPoint_current[1] = primaryRaySphereFirstIntersectionPoint[1];
					primaryRaySphereIntersectionPoint_current[2] = primaryRaySphereFirstIntersectionPoint[2];
					primaryRaySphereIntersectionPoint_current[3] = primaryRaySphereFirstIntersectionPoint[3];
					primaryRaySphereIntersectionPoint_current[4] = primaryRaySphereFirstIntersectionPoint[4];
					primaryRaySphereIntersectionPoint_current[5] = 1.0;// primaryRaySphereFirstIntersectionPoint[5];
				}
				else {
					primaryRaySphereIntersectionPoint_current[1] = primaryRaySphereSecondIntersectionPoint[1];
					primaryRaySphereIntersectionPoint_current[2] = primaryRaySphereSecondIntersectionPoint[2];
					primaryRaySphereIntersectionPoint_current[3] = primaryRaySphereSecondIntersectionPoint[3];
					primaryRaySphereIntersectionPoint_current[4] = primaryRaySphereSecondIntersectionPoint[4];
					primaryRaySphereIntersectionPoint_current[5] = 1.0;// primaryRaySphereSecondIntersectionPoint[5];
				}
			}
			// If the current primary ray sphere intersection point is closer to the camera than the previous closest intersection point,
			// closest intersection point = current intersection point 
			float prsip_distanceToCamera_current = sqrt(((primaryRaySphereIntersectionPoint_current[1]-cameraOrigin[1])*(primaryRaySphereIntersectionPoint_current[1]-cameraOrigin[1]))+((primaryRaySphereIntersectionPoint_current[2]-cameraOrigin[2])*(primaryRaySphereIntersectionPoint_current[2]-cameraOrigin[2]))+((primaryRaySphereIntersectionPoint_current[3]-cameraOrigin[3])*(primaryRaySphereIntersectionPoint_current[3]-cameraOrigin[3])));
			if(prsip_distanceToCamera_current < prsip_distanceToCamera){
				primaryRaySphereIntersectionPoint[1] = primaryRaySphereIntersectionPoint_current[1];
				primaryRaySphereIntersectionPoint[2] = primaryRaySphereIntersectionPoint_current[2];
				primaryRaySphereIntersectionPoint[3] = primaryRaySphereIntersectionPoint_current[3];
				primaryRaySphereIntersectionPoint[4] = primaryRaySphereIntersectionPoint_current[4];
				primaryRaySphereIntersectionPoint[5] = 1.0;//primaryRaySphereIntersectionPoint_current[5];
				sphereTempColour.x = spheres[n].s5; 
				sphereTempColour.y = spheres[n].s6; 
				sphereTempColour.z = spheres[n].s7; 
				prsip_distanceToCamera = prsip_distanceToCamera_current;
				closestSphereIndex = n;
			}
		}
	}
	
	// Tests the primary ray for intersecion with the plane 
	float primaryRayPlaneIntersectionPoint[6];
	// Creates a point pair by performing (*p).L where p is the plane and L is the primary ray 
	float4 primaryRayPlanePointPair;
	primaryRayPlanePointPair.s0 = (-(plane[4] * primaryRay[10])) + (-((-plane[3]) * primaryRay[11])) + (-(plane[2] * primaryRay[13])); // e1 ^ einf
	primaryRayPlanePointPair.s1 = plane[4] * primaryRay[7] + (-plane[3]) * primaryRay[8] + (-((-plane[1]) * primaryRay[13])); // e2 ^ einf
	primaryRayPlanePointPair.s2 = (-(plane[4] * primaryRay[6])) + plane[2] * primaryRay[8] + (-plane[1]) * primaryRay[11]; // e3 ^ einf
	primaryRayPlanePointPair.s3 = (-((-plane[3]) * primaryRay[6])) + (-(plane[2] * primaryRay[7])) + (-((-plane[1]) * primaryRay[10])); // einf ^ e0
	// Calculates the dot product of the point pair with itself 
	// A valid intersection exists if the dot product is greater than 0.
	// As the point pair always encodes the point at infinity regardless of whether a valid intersection exists,
	// the condition for a valid intersection is dot product > 0 and not dot product >= 0 as with the primary ray sphere point pair 
	float primaryRayPlanePointPairSquared = primaryRayPlanePointPair.s3 * primaryRayPlanePointPair.s3; // 1.0
	if(primaryRayPlanePointPairSquared > 0){
		// Decomposes the point pair by using the formula shown in section 3.2.2.2
		// S = e0.PP where PP is the point pair 
		float S[6];
		S[1] = primaryRayPlanePointPair.s0; // e1
		S[2] = primaryRayPlanePointPair.s1; // e2
		S[3] = primaryRayPlanePointPair.s2; // e3
		S[5] = (-primaryRayPlanePointPair.s3); // e0
		// P = S x einf x inverse(S) 
		// where 'x' represents the geometric product 
		// In order to reach this part of the program, there must be a valid intersection between the primary ray and the plane.
		// This means that decomposing the point pair to a non normalised point (I.E. removing this point at infinity from the point pair)
		// will at most consist of the blades e1,e2,e3,einf, and e0.
		// This means that all other blades will always have coefficients of 0.
		// As GAALOP has no context sensitive optimisation, the unedited code will attempt to calculate these blade coefficients regardless
		// Whilst the GAALOP generated code below has been edited to remove this computational wastage, the unedited code is shown in the
		// comments at the end of each line.
		// This is to illustrate the point I made in section 4.2
		float P[32];
		P[1] = (-S[5]) * (S[1] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + (-(S[3] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[1] * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + S[2] * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + S[3] * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e1
		P[2] = (-S[5]) * (S[1] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[1] * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[2] * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + S[3] * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e2
		P[3] = (-S[5]) * (S[1] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-(S[1] * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[2] * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[3] * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // e3
		P[4] = (-(S[1] * (S[1] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + (-(S[3] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))))) + (-(S[2] * (S[1] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))))) + (-(S[3] * (S[1] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // einf
		P[5] = (-S[5]) * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-S[5]) * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e0
		P[16] = 0;//(-S[5]) * (S[1] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[3] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-(S[1] * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + S[2] * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-(S[3] * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // e1 ^ (e2 ^ e3)
		P[17] = 0;//(-(S[1] * (S[1] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))))) + S[2] * (S[1] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + (-(S[3] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[3] * (S[1] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[3] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // e1 ^ (e2 ^ einf)
		P[18] = 0;//(-S[5]) * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-S[5]) * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e1 ^ (e2 ^ e0)
		P[19] = 0;//(-(S[1] * (S[1] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + S[2] * (S[1] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[3] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + S[3] * (S[1] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + (-(S[3] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // e1 ^ (e3 ^ einf)
		P[20] = 0;//(-S[5]) * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-S[5]) * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e1 ^ (e3 ^ e0)
		P[21] = 0;//S[1] * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-(S[2] * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[3] * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-S[5]) * (S[1] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + (-(S[3] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // e1 ^ (einf ^ e0)
		P[22] = 0;//(-(S[1] * (S[1] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[3] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-(S[2] * (S[1] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + S[3] * (S[1] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // e2 ^ (e3 ^ einf)
		P[23] = 0;//(-S[5]) * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-S[5]) * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e2 ^ (e3 ^ e0)
		P[24] = 0;//S[1] * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + S[2] * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-(S[3] * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + (-S[5]) * (S[1] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))); // e2 ^ (einf ^ e0)
		P[25] = 0;//S[1] * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + S[2] * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + S[3] * (S[1] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[5] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-S[5]) * (S[1] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[2] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + S[3] * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e3 ^ (einf ^ e0)
		P[31] = 0;//S[1] * (S[2] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-(S[2] * (S[1] * (-(S[3] * S[5] + (-(S[5] * S[3])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[3] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))))) + S[3] * (S[1] * (-(S[2] * S[5] + (-(S[5] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[5] + (-(S[5] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[5] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))) + (-S[5]) * (S[1] * (-(S[2] * S[3] + (-(S[3] * S[2])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))) + (-(S[2] * (-(S[1] * S[3] + (-(S[3] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2]))))))))) + S[3] * (-(S[1] * S[2] + (-(S[2] * S[1])))) / ((S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) * (S[1] * S[1] + S[2] * S[2] + S[3] * S[3]) + (-((S[1] * S[2] + (-(S[2] * S[1]))) * (-(S[1] * S[2] + (-(S[2] * S[1])))))) + (-((S[1] * S[3] + (-(S[3] * S[1]))) * (-(S[1] * S[3] + (-(S[3] * S[1])))))) + (-((S[2] * S[3] + (-(S[3] * S[2]))) * (-(S[2] * S[3] + (-(S[3] * S[2])))))))); // e1 ^ (e2 ^ (e3 ^ (einf ^ e0)))
		
		// Normalises the point calculated in P to give the intersection point.
		// Pn = P/(einf.P) where Pn is the intersection point 
		primaryRayPlaneIntersectionPoint[1] = (-(P[1] * (-P[5]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[2] * P[18] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[3] * P[20] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + P[5] * P[21] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[16] * P[23] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + P[18] * P[24] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[20] * P[25] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[23] * (-P[31]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))))); // e1
		primaryRayPlaneIntersectionPoint[2] = (-(P[1] * P[18] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[2] * (-P[5]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[3] * P[23] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + P[5] * P[24] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[16] * P[20] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[18] * P[21] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + P[20] * (-P[31]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[23] * P[25] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))); // e2
		primaryRayPlaneIntersectionPoint[3] = (-(P[1] * P[20] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[2] * P[23] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[3] * (-P[5]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[5] * P[25] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[16] * P[18] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[18] * (-P[31]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[20] * P[21] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[23] * P[24] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))))); // e3
		primaryRayPlaneIntersectionPoint[4] = (-(P[1] * P[21] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[2] * P[24] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[3] * P[25] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + P[4] * (-P[5]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[16] * (-P[31]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[17] * P[18] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[19] * P[20] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[21] * P[21] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[22] * P[23] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[24] * P[24] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[25] * P[25] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + P[31] * (-P[31]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))); // einf
		primaryRayPlaneIntersectionPoint[5] = (-(P[5] * (-P[5]) / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))) + (-(P[18] * P[18] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[20] * P[20] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))) + (-(P[23] * P[23] / ((-P[5]) * (-P[5]) + (-((-P[18]) * P[18])) + (-((-P[20]) * P[20])) + (-((-P[23]) * P[23]))))))); // e0
		prpip_distanceToCamera = sqrt(((primaryRayPlaneIntersectionPoint[1]-cameraOrigin[1])*(primaryRayPlaneIntersectionPoint[1]-cameraOrigin[1]))+((primaryRayPlaneIntersectionPoint[2]-cameraOrigin[2])*(primaryRayPlaneIntersectionPoint[2]-cameraOrigin[2]))+((primaryRayPlaneIntersectionPoint[3]-cameraOrigin[3])*(primaryRayPlaneIntersectionPoint[3]-cameraOrigin[3])));
		float primaryRayDirectionE1 = currentPixel[1] - cameraOrigin[1];
		// It must also be determined if the intersection point is infront of the camera and therfore valid 
		if((primaryRayPlaneIntersectionPoint[1]/ primaryRayDirectionE1) > 0){prpip_distanceToCamera = INFINITY;}
	}
	
	
	float primaryRayObjectIntersectionPoint[6];
	float3 tempColour;
	
	if(prsip_distanceToCamera == INFINITY && prpip_distanceToCamera == INFINITY){
		// If the primary ray has no valid intersections with either the plane or the sphere,
		// the current pixel colour is set to the background colour,
		// and the kernel instance for the current work item / id terminates here. 
		outputData[id] = backgroundColour;
	}

	else {
		// If the primary ray intersects at least one of the scene objects, 
		// the closest intersection point to the camera is chosen, and the corresponding object colour is stored. 
		// N.B. No adjustment has to be made to the intersection point as shadow acne is not a problem
		int sphereFlag;
		if (prsip_distanceToCamera < prpip_distanceToCamera){
			primaryRayObjectIntersectionPoint[1] = primaryRaySphereIntersectionPoint[1];
			primaryRayObjectIntersectionPoint[2] = primaryRaySphereIntersectionPoint[2];
			primaryRayObjectIntersectionPoint[3] = primaryRaySphereIntersectionPoint[3];
			primaryRayObjectIntersectionPoint[4] = primaryRaySphereIntersectionPoint[4];
			primaryRayObjectIntersectionPoint[5] = primaryRaySphereIntersectionPoint[5];
			tempColour = sphereTempColour;
			sphereFlag = 1;
		}
		if (prsip_distanceToCamera > prpip_distanceToCamera){
			primaryRayObjectIntersectionPoint[1] = primaryRayPlaneIntersectionPoint[1];
			primaryRayObjectIntersectionPoint[2] = primaryRayPlaneIntersectionPoint[2];
			primaryRayObjectIntersectionPoint[3] = primaryRayPlaneIntersectionPoint[3];
			primaryRayObjectIntersectionPoint[4] = primaryRayPlaneIntersectionPoint[4];
			primaryRayObjectIntersectionPoint[5] = primaryRayPlaneIntersectionPoint[5];
			tempColour = planeColour;
			sphereFlag = 0;
		}
		
		// Creates a line from the primary ray intersection point ot the light source 
		// shadowRay = *(intersection ^ light position ^ einf)
		float shadowRay[14];
		shadowRay[6] = primaryRayObjectIntersectionPoint[3] + (-lightPosition[3]); // e1 ^ e2
		shadowRay[7] = (-(primaryRayObjectIntersectionPoint[2] + (-lightPosition[2]))); // e1 ^ e3
		shadowRay[8] = (-(primaryRayObjectIntersectionPoint[2] * lightPosition[3] + (-(primaryRayObjectIntersectionPoint[3] * lightPosition[2])))); // e1 ^ einf
		shadowRay[10] = primaryRayObjectIntersectionPoint[1] + (-lightPosition[1]); // e2 ^ e3
		shadowRay[11] = primaryRayObjectIntersectionPoint[1] * lightPosition[3] + (-(primaryRayObjectIntersectionPoint[3] * lightPosition[1])); // e2 ^ einf
		shadowRay[13] = (-(primaryRayObjectIntersectionPoint[1] * lightPosition[2] + (-(primaryRayObjectIntersectionPoint[2] * lightPosition[1])))); // e3 ^ einf
		
		// Tests the shadow ray for intersection with the scene spheres 
		int shadowFlag = 0;
		for(int n = 0; n < numberOfSpheres; n++){
			float shadowRaySpherePointPair[26];
			shadowRaySpherePointPair[16] = shadowRay[6] * spheres[n].s2 + (-(shadowRay[7] * spheres[n].s1)) + shadowRay[10] * spheres[n].s0; // e1 ^ (e2 ^ e3)
			shadowRaySpherePointPair[17] = shadowRay[6] * spheres[n].s3 + (-(shadowRay[8] * spheres[n].s1)) + shadowRay[11] * spheres[n].s0; // e1 ^ (e2 ^ einf)
			shadowRaySpherePointPair[18] = shadowRay[6]; // e1 ^ (e2 ^ e0)
			shadowRaySpherePointPair[19] = shadowRay[7] * spheres[n].s3 + (-(shadowRay[8] * spheres[n].s2)) + shadowRay[13] * spheres[n].s0; // e1 ^ (e3 ^ einf)
			shadowRaySpherePointPair[20] = shadowRay[7]; // e1 ^ (e3 ^ e0)
			shadowRaySpherePointPair[21] = shadowRay[8]; // e1 ^ (einf ^ e0)
			shadowRaySpherePointPair[22] = shadowRay[10] * spheres[n].s3 + (-(shadowRay[11] * spheres[n].s2)) + shadowRay[13] * spheres[n].s1; // e2 ^ (e3 ^ einf)
			shadowRaySpherePointPair[23] = shadowRay[10]; // e2 ^ (e3 ^ e0)
			shadowRaySpherePointPair[24] = shadowRay[11]; // e2 ^ (einf ^ e0)
			shadowRaySpherePointPair[25] = shadowRay[13]; // e3 ^ (einf ^ e0)
			
			// Calculates the dot product of the point pair with itself
			float shadowRaySpherePointPairSqurared = (-((-(shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16])) + shadowRaySpherePointPair[17] * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[17] + shadowRaySpherePointPair[19] * shadowRaySpherePointPair[20] + shadowRaySpherePointPair[20] * shadowRaySpherePointPair[19] + shadowRaySpherePointPair[21] * shadowRaySpherePointPair[21] + shadowRaySpherePointPair[22] * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * shadowRaySpherePointPair[22] + shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24] + shadowRaySpherePointPair[25] * shadowRaySpherePointPair[25])); // 1.0
			// If dot product >= 0 shadow ray intersects current sphere 
			if(shadowRaySpherePointPairSqurared >= 0){
				if(sphereFlag == 0){shadowFlag=1;}
				// is current sphere itself? 
				if(sphereFlag == 1 && n == closestSphereIndex){
					// The current sphere is the primary ray intersection point sphere 
					// I.E. the shadow ray intersects the sphere twice,
					// If the shadow ray intersection point that is not the primary ray intersection point is closer to the camera than 
					// the primary ray intersection point, then the sphere is in shadow.
					// The point pair is decomposed as before and tested in the same way as in the Linear Algebra version. 
					float shadowRaySphereFirstIntersectionPoint[6];
					shadowRaySphereFirstIntersectionPoint[1] = (-sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16])) * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + shadowRaySpherePointPair[25] * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-shadowRaySpherePointPair[24]) * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-((-shadowRaySpherePointPair[23]) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e1
					shadowRaySphereFirstIntersectionPoint[2] = (-sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16])) * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-(shadowRaySpherePointPair[25] * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + shadowRaySpherePointPair[21] * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-(shadowRaySpherePointPair[20] * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e2
					shadowRaySphereFirstIntersectionPoint[3] = (-sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16])) * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-((-shadowRaySpherePointPair[24]) * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-(shadowRaySpherePointPair[21] * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[18]) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e3
					shadowRaySphereFirstIntersectionPoint[4] = (-sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16])) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-(shadowRaySpherePointPair[22] * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[19]) * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-(shadowRaySpherePointPair[17] * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[16]) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // einf
					shadowRaySphereFirstIntersectionPoint[5] = 1.0;// (-((-shadowRaySpherePointPair[23]) * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-(shadowRaySpherePointPair[20] * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[18]) * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e0
					float shadowRaySphereSecondIntersectionPoint[6];
					shadowRaySphereSecondIntersectionPoint[1] = sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16]) * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + shadowRaySpherePointPair[25] * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-shadowRaySpherePointPair[24]) * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-((-shadowRaySpherePointPair[23]) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e1
					shadowRaySphereSecondIntersectionPoint[2] = sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16]) * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-(shadowRaySpherePointPair[25] * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + shadowRaySpherePointPair[21] * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-(shadowRaySpherePointPair[20] * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e2
					shadowRaySphereSecondIntersectionPoint[3] = sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16]) * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-((-shadowRaySpherePointPair[24]) * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-(shadowRaySpherePointPair[21] * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[18]) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e3
					shadowRaySphereSecondIntersectionPoint[4] = sqrt((-((-shadowRaySpherePointPair[25]) * (-shadowRaySpherePointPair[25]))) + (-(shadowRaySpherePointPair[24] * shadowRaySpherePointPair[24])) + (-shadowRaySpherePointPair[22]) * shadowRaySpherePointPair[23] + shadowRaySpherePointPair[23] * (-shadowRaySpherePointPair[22]) + (-((-shadowRaySpherePointPair[21]) * (-shadowRaySpherePointPair[21]))) + shadowRaySpherePointPair[19] * (-shadowRaySpherePointPair[20]) + (-shadowRaySpherePointPair[20]) * shadowRaySpherePointPair[19] + (-shadowRaySpherePointPair[17]) * shadowRaySpherePointPair[18] + shadowRaySpherePointPair[18] * (-shadowRaySpherePointPair[17]) + shadowRaySpherePointPair[16] * shadowRaySpherePointPair[16]) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]) + (-(shadowRaySpherePointPair[22] * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[19]) * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-(shadowRaySpherePointPair[17] * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[16]) * shadowRaySpherePointPair[16] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // einf
					shadowRaySphereSecondIntersectionPoint[5] = 1.0;// (-((-shadowRaySpherePointPair[23]) * shadowRaySpherePointPair[23] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-(shadowRaySpherePointPair[20] * (-shadowRaySpherePointPair[20]) / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))) + (-((-shadowRaySpherePointPair[18]) * shadowRaySpherePointPair[18] / (shadowRaySpherePointPair[23] * shadowRaySpherePointPair[23] + (-shadowRaySpherePointPair[20]) * (-shadowRaySpherePointPair[20]) + shadowRaySpherePointPair[18] * shadowRaySpherePointPair[18]))); // e0
					
					float delta1 = primaryRayObjectIntersectionPoint[4] - shadowRaySphereFirstIntersectionPoint[4];
					float delta2 = primaryRayObjectIntersectionPoint[4] - shadowRaySphereSecondIntersectionPoint[4];
					float srsfip_distanceToLightSource = INFINITY;
					float prip_distanceToLightSource = sqrt(((primaryRayObjectIntersectionPoint[1]-lightPosition[1])*(primaryRayObjectIntersectionPoint[1]-lightPosition[1]))+((primaryRayObjectIntersectionPoint[2]-lightPosition[2])*(primaryRayObjectIntersectionPoint[2]-lightPosition[2]))+((primaryRayObjectIntersectionPoint[3]-lightPosition[3])*(primaryRayObjectIntersectionPoint[3]-lightPosition[3])));
					if( delta1 >= -0.001 && delta1 <= 0.001){
						srsfip_distanceToLightSource = sqrt(((shadowRaySphereSecondIntersectionPoint[1]-lightPosition[1])*(shadowRaySphereSecondIntersectionPoint[1]-lightPosition[1]))+((shadowRaySphereSecondIntersectionPoint[2]-lightPosition[2])*(shadowRaySphereSecondIntersectionPoint[2]-lightPosition[2]))+((shadowRaySphereSecondIntersectionPoint[3]-lightPosition[3])*(shadowRaySphereSecondIntersectionPoint[3]-lightPosition[3])));
					}
					else if( delta2 >= - 0.001 && delta2 <= 0.001){
						srsfip_distanceToLightSource = sqrt(((shadowRaySphereFirstIntersectionPoint[1]-lightPosition[1])*(shadowRaySphereFirstIntersectionPoint[1]-lightPosition[1]))+((shadowRaySphereFirstIntersectionPoint[2]-lightPosition[2])*(shadowRaySphereFirstIntersectionPoint[2]-lightPosition[2]))+((shadowRaySphereFirstIntersectionPoint[3]-lightPosition[3])*(shadowRaySphereFirstIntersectionPoint[3]-lightPosition[3])));
					}
					if(srsfip_distanceToLightSource < prip_distanceToLightSource){shadowFlag = 1;}
				}
				else {shadowFlag = 1;}
			}
		}
		if(shadowFlag == 0){
			float cosTheta = 1;
			if(sphereFlag == 1){
				// Create sphere normal the prip 
				// calculate cos(theta) between sr and prip 
				// cos(theta) = (*L1).(*L2)/(abs(*L1)abs(*L2))
				float sphereCentre[6];
				sphereCentre[1] = spheres[closestSphereIndex].s0;
				sphereCentre[2] = spheres[closestSphereIndex].s1;
				sphereCentre[3] = spheres[closestSphereIndex].s2;
				sphereCentre[4] = sqrt((sphereCentre[1]*sphereCentre[1])+(sphereCentre[2]*sphereCentre[2])+(sphereCentre[3]*sphereCentre[3]))/2.0;
				sphereCentre[5] = 1;
				
				float spherePripNormal[16];
				spherePripNormal[6] = sphereCentre[3] + (-primaryRayObjectIntersectionPoint[3]); // e1 ^ e2
				spherePripNormal[7] = (-(sphereCentre[2] + (-primaryRayObjectIntersectionPoint[2]))); // e1 ^ e3
				spherePripNormal[8] = (-(sphereCentre[2] * primaryRayObjectIntersectionPoint[3] + (-(sphereCentre[3] * primaryRayObjectIntersectionPoint[2])))); // e1 ^ einf
				spherePripNormal[10] = sphereCentre[1] + (-primaryRayObjectIntersectionPoint[1]); // e2 ^ e3
				spherePripNormal[11] = sphereCentre[1] * primaryRayObjectIntersectionPoint[3] + (-(sphereCentre[3] * primaryRayObjectIntersectionPoint[1])); // e2 ^ einf
				spherePripNormal[13] = (-(sphereCentre[1] * primaryRayObjectIntersectionPoint[2] + (-(sphereCentre[2] * primaryRayObjectIntersectionPoint[1])))); // e3 ^ einf
				cosTheta = (shadowRay[10] * spherePripNormal[10] + (-shadowRay[7]) * (-spherePripNormal[7]) + shadowRay[6] * spherePripNormal[6]) * ((shadowRay[10] * shadowRay[10] + (-shadowRay[7]) * (-shadowRay[7]) + shadowRay[6] * shadowRay[6]) * (spherePripNormal[10] * spherePripNormal[10] + (-spherePripNormal[7]) * (-spherePripNormal[7]) + spherePripNormal[6] * spherePripNormal[6])) / ((shadowRay[10] * shadowRay[10] + (-shadowRay[7]) * (-shadowRay[7]) + shadowRay[6] * shadowRay[6]) * (spherePripNormal[10] * spherePripNormal[10] + (-spherePripNormal[7]) * (-spherePripNormal[7]) + spherePripNormal[6] * spherePripNormal[6]) * (shadowRay[10] * shadowRay[10] + (-shadowRay[7]) * (-shadowRay[7]) + shadowRay[6] * shadowRay[6]) * sqrt(spherePripNormal[10] * spherePripNormal[10] + (-spherePripNormal[7]) * (-spherePripNormal[7]) + spherePripNormal[6] * spherePripNormal[6])); // 1.0
				cosTheta = cosTheta*20;
			}
			else{
				// As the angle between the shadow ray and the plane could not be calculated in Linear Algebra,
				// It was not calculated here. 
			}
			if(cosTheta > 1){cosTheta = 1;}
			if(cosTheta < 0){cosTheta = 0;}
			outputData[id].x = cosTheta*(tempColour.x + lightColour.x)/2 + (ambient * tempColour.x);
			outputData[id].y = cosTheta*(tempColour.y + lightColour.y)/2 + (ambient * tempColour.x);
			outputData[id].z = cosTheta*(tempColour.z + lightColour.z)/2 + (ambient * tempColour.x);
		}
		else{
			outputData[id].x = ambient * tempColour.x;
			outputData[id].y = ambient * tempColour.y;
			outputData[id].z = ambient * tempColour.z;
		}
	}
	// Restricts the output RGB data between 0 and 1 
	if(outputData[id].x > 1){outputData[id].x = 1;}
	if(outputData[id].y > 1){outputData[id].y = 1;}
	if(outputData[id].z > 1){outputData[id].z = 1;}
	if(outputData[id].x < 0){outputData[id].x = 0;}
	if(outputData[id].y < 0){outputData[id].y = 0;}
	if(outputData[id].z < 0){outputData[id].z = 0;}
}
	
